spring.application.name=mongo-blog
#spring.data.mongodb.host=127.0.0.1
#spring.data.mongodb.port=27017
spring.data.mongodb.uri=mongodb://localhost:27017/mongoblog
#spring.data.mongodb.database=nobody
#spring.data.mongodb.username=SpringBoot
#spring.data.mongodb.password=1997mxmx
#spring.data.mongodb.address=127.0.0.1:27017
#spring.data.mongodb.authenticationDatabase=admin
spring.data.mongodb.authentication-database=admin
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

#server.port = 8080
#spring.datasource.url=jdbc:mysql://localhost:3306/chuwa
#spring.datasource.username=SpringBoot
#spring.datasource.password=1997mxmx
#spring.jpa.show-sql=true


# high-low level: fatal - error - warn - info - debug - trace
# set info: show info, warn, error, set error: only show error
logging.level.root=info
# set level for specific class
#logging.level.com.example.accountmanagementsystem.service.AccountService=warn

# must mark a different port compared with producer port
#server.port = 8082

# set the listener port
#spring.kafka.bootstrap-servers=localhost:9092

# What?s the group id? - It identifies the destination the message sending into.
# the direction for message
# consumer only consumer the message with this group-id
#spring.kafka.consumer.group-id="validateToken"
#spring.kafka.consumer.group-id="grabStatus"

#server.port=8765
#eureka.client.serviceUrl.defaultZone=http://localhost:8765/eureka/


#ereka is the admin
#eureka.client.register-with-eureka=false
#eureka.client.fetch-registry=false

# once putting up-> instance id is this
#eureka.client.instance-id=account_111
#spring.application.name=account


#initilize database after restart
#spring.jpa.hibernate.ddl-auto=create